@model SessionReportModel
@{
    int collapseIndex = 0;
}
@functions
{
    // 14 - #00FF00
    // 15 - #78F700
    int GetPercentageForWindSpeed(decimal windSpeed)
    {
        // 5-50 is our range
        windSpeed = Math.Min(windSpeed + 5, 50);
        return (int)Math.Round(windSpeed * 100 / 50);
    }
    string GetWindSpeedClass(decimal windSpeed)
    {
        var number = (int)Math.Ceiling(windSpeed / 2);
        if(number > 25) {
            number = 25;
        }
        return $"wind-speed-{number}";
    }
    string GetCloudCoverColor(decimal cloudCover)
    {
        var color = "#FFFFFF";
        if(cloudCover >= 100)
        {
            color = "#575757";
        }
        else if(cloudCover >= 90)
        {
            color = "#787878";
        }
        else if (cloudCover >= 80)
        {
            color = "#8a8a8a";
        }
        else if (cloudCover >= 70)
        {
            color = "#9e9e9e";
        }
        else if (cloudCover >= 60)
        {
            color = "#adadad";
        }
        else if (cloudCover >= 50)
        {
            color = "#bfbfbf";
        }
        else if (cloudCover >= 40)
        {
            color = "#cccccc";
        }
        else if (cloudCover >= 30)
        {
            color = "#d6d6d6";
        }
        else if (cloudCover >= 20)
        {
            color = "#e3e3e3";
        }
        else if (cloudCover >= 10)
        {
            color = "#f0f0f0";
        }

        return color;
    }

    string GetPrecipColor(decimal value)
    {
        var color = "#FFFFFF";
        if (value > .3M)
        {
            color = "#5c7aff";
        }
        else if (value > .2M)
        {
            color = "#8197fc";
        }
        else if (value >= .1M)
        {
            color = "#bac7ff";
        }
        else if (value > .05M)
        {
            color = "#d4dbfc";
        }
       
        return color;
    }
}
<style>
    [data-toggle="collapse"].collapsed .if-not-collapsed {
        display: none;
    }
    [data-toggle="collapse"]:not(.collapsed) .if-collapsed {
        display: none;
    }
</style>
<div class="container">
    <div class="page">
        <div class="body">
            @if(Model.SessionSpots.Count == 0)
            {
                <p class="alert alert-warning">There aren't any good sessions!! <i class="fa-regular fa-face-sad-cry"></i></p>
                <hr />
            }
            @foreach (var sessionsByDay in Model.SessionSpots.GroupBy(x => new DateTime(x.From.Year, x.From.Month, x.From.Day)))
            {
                <h2><i class="fa fa-calendar-days"></i> @sessionsByDay.Key.ToString("dddd, MMMM dd")</h2>
                @foreach (var spot in sessionsByDay)
                {
                    var averageWindSpeed = Math.Round(spot.Data.Average(x => x.WindSpeed), 1);
                    collapseIndex++;
                    <h5><i class="fa fa-location-dot"></i> @spot.Name <span class="badge badge-secondary">@spot.From.ToString("h tt") - @spot.To.ToString("h tt")</span> <span class="badge badge-secondary @(GetWindSpeedClass(averageWindSpeed))">avg @averageWindSpeed kts</span> <a href="https://wx.ikitesurf.com/spot/@spot.SpotId" class="badge badge-light">Forecast <i class="fa fa-arrow-right"></i></a></h5>
                    <p>
                        <a class="btn btn-light collapsed" role="button" data-toggle="collapse" href="#collapse-@(collapseIndex)"><span class="if-collapsed">Show details</span><span class="if-not-collapsed">Hide details</span></a>
                    </p>
                    <div class="collapse" id="collapse-@(collapseIndex)">
                        <div style="overflow-x: auto;">
                            <table class="table table-responsive">
                                <thead>
                                    <tr>
                                        <th scope="col" style="width: 1%; text-align: center;">Time</th>
                                        <th scope="col" style="min-width: 10em;">Speed (kts)</th>
                                        <th scope="col" style="width: 1%; text-align: center;">Direction</th>
                                        <th scope="col" style="width: 1%;text-align: center;">Temp</th>
                                        <th scope="col" style="width: 1%;text-align: center;">Cloud</th>
                                        <th scope="col" style="width: 1%;text-align: center;">Precip</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var data in spot.Data)
                                    {
                                        <tr>
                                            <td scope="row" style="white-space: nowrap;text-align: center;"><span class="badge badge-secondary">@data.ModelTime.ToString("h tt")</span></td>
                                            <td>
                                                <div class="progress">
                                                    <div class="progress-bar @(GetWindSpeedClass(data.WindSpeed))" role="progressbar" style="width: @(GetPercentageForWindSpeed(data.WindSpeed))%" aria-valuenow="@(GetPercentageForWindSpeed(data.WindSpeed))" aria-valuemin="0" aria-valuemax="100"><b>@data.WindSpeed</b></div>
                                                </div>
                                            </td>
                                            <td style="white-space: nowrap;text-align: center;">@data.WindDirectionText</td>
                                            <td style="white-space: nowrap;text-align: center;">@data.Temp F</td>
                                            <td style="white-space: nowrap;text-align: center;"><span class="badge badge-secondary" style="background-color: @(GetCloudCoverColor(data.CloudCover)); color: black;">@Math.Round(data.CloudCover)%</span></td>
                                            <td style="white-space: nowrap;text-align: center;"><span title="Type: @(data.PrecipType?.ToUpper())" class="badge badge-secondary" style="background-color: @(GetPrecipColor(data.TotalPrecip)); color: black;">@Math.Round(data.TotalPrecip, 2).ToString("N2")</span></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                }
                 <hr />
            }
            <p>
                <a href="https://github.com/pauldotknopf/ikitesurf-bot/blob/main/rules.yml" class="btn btn-secondary">View rules</a>
            </p>
        </div>
    </div>
</div>